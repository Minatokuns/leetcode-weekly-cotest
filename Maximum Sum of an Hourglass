class Solution {
    public int maxSum(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        int sum = 0;
        int maxSum = Integer.MIN_VALUE;
        // -2 in both loops because in loop we are calculating +2 in matrix otherwise it will go outof index
        for(int i = 0 ; i<m-2;i++){
            for(int j = 0;j<n-2;j++){
                //calculating in hourglass pattern given but that pattern is available in multiple times so we use maxsum to check evrytime
                sum = grid[i][j]+grid[i][j+1]+grid[i][j+2]+grid[i+1][j+1]+grid[i+2][j]+grid[i+2][j+1]+grid[i+2][j+2];
                maxSum = Math.max(maxSum,sum);
            }
        }
        return maxSum;
    }
}
// mat[][] = 2 3 0 0 0 
//           0 1 0 0 0
//           1 1 1 0 0 
//           0 0 2 4 4
//           0 0 0 2 0
// Possible hour glass are :
// 2 3 0  3 0 0   0 0 0  
//   1      0       0 
// 1 1 1  1 1 0   1 0 0 

// 0 1 0  1 0 0  0 0 0 
//   1      1      0  
// 0 0 2  0 2 4  2 4 4 

// 1 1 1  1 1 0  1 0 0
//   0      2      4
// 0 0 0  0 0 2  0 2 0
//for more reference https://www.geeksforgeeks.org/maximum-sum-hour-glass-matrix/
